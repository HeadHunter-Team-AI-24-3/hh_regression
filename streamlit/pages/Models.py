import streamlit as st
import json
import requests
from pages.Dataset import FASTAPI_HOST

st.set_page_config(page_title="–ú–æ–¥–µ–ª—å", page_icon="", layout="wide")

st.title("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–¥–µ–ª–∏")
tab1, tab2, tab3 = st.tabs(["‚úèÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ", "üìÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ"])


def train_model(model_id, model_name, hyperparameters):
    param = {
        "model_id": model_id,
        "model_name": model_name,
        "hyperparameters": hyperparameters,
    }
    response = requests.post(f"{FASTAPI_HOST}/train_model", json=param)
    if response.status_code == 200:
        st.success(f"–ú–æ–¥–µ–ª—å {model_name} —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞!")
        st.json(response.json())
    else:
        st.error(f"–û—à–∏–±–∫–∞: {response.status_code}, {response.text}")


def get_model_info(model_id):
    response = requests.get(f"{FASTAPI_HOST}/get_model_info/{model_id}")
    if response.status_code == 200:
        st.json(response.json())
    else:
        st.error(f"–û—à–∏–±–∫–∞: {response.status_code}, {response.text}")


def list_all_models():
    response = requests.get(f"{FASTAPI_HOST}/get_models_info")
    if response.status_code == 200:
        models = response.json()
        st.subheader("–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π:")
        for model in models:
            st.json(model)
            st.write("---")
    else:
        st.error(f"–û—à–∏–±–∫–∞: {response.status_code}, {response.text}")


def delete_model(model_id):
    response = requests.delete(f"{FASTAPI_HOST}/models/{model_id}")
    if response.status_code == 200:
        st.success(f"–ú–æ–¥–µ–ª—å {model_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
    else:
        st.error(f"–û—à–∏–±–∫–∞: {response.status_code}, {response.text}")


def delete_all_models():
    response = requests.delete(f"{FASTAPI_HOST}/models")
    if response.status_code == 200:
        st.success("–í—Å–µ –º–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
    else:
        st.error(f"–û—à–∏–±–∫–∞: {response.status_code}, {response.text}")


with tab1:
    st.write("–°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π")
    container = st.container(border=True)
    model_id = container.text_input("ID –º–æ–¥–µ–ª–∏", key=1)
    model_name = container.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏", key=2)
    hyperparameters = container.text_area(
        "–ì–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã", value='{"iterations": 100, "learning_rate": 0.1, "depth": 6}'
    )
    if container.button("–û–±—É—á–∏—Ç—å"):
        train_model(model_id, model_name, json.loads(hyperparameters))

with tab2:
    st.write("–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏")
    option = st.selectbox(
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–æ–ª—å–∫–∏ –º–æ–¥–µ–ª—è—Ö —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?",
        ("–û–± –æ–¥–Ω–æ–π", "–û –≤—Å–µ—Ö"),
        index=None,
        placeholder="Select",
    )

    if option == "–û–± –æ–¥–Ω–æ–π":
        model_id_inf = st.text_input("ID –º–æ–¥–µ–ª–∏", key=3)
        if st.button("–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"):
            get_model_info(model_id_inf)
    elif option == "–û –≤—Å–µ—Ö":
        if st.button("–ü—Ä–æ—Å–º–æ—Ç—Ä"):
            list_all_models()

with tab3:
    option = st.selectbox(
        "–°–∫–æ–ª—å–∫–æ –º–æ–¥–µ–ª–µ–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?",
        ("–û–¥–Ω—É", "–í—Å–µ"),
        index=None,
        placeholder="Select",
    )

    if option == "–û–¥–Ω—É":
        model_id = st.text_input("Model ID")
        if st.button("–£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ–ª—å"):
            delete_model(model_id)
    elif option == "–í—Å–µ":
        if st.button("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –º–æ–¥–µ–ª–∏"):
            delete_all_models()
